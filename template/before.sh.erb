# Note that after.sh, before.sh.erb and script.sh.erb all run
# inside the container specified in submit.yml.erb.
# This script starts a VNC server.

export LOGDIR="$HOME/.local/share/bc_alvis_vnc"
mkdir -p "$LOGDIR"
export LOGFILE="${LOGDIR}/bc_alvis_vnc.log"
export VNC_LOG="${LOGDIR}/vnc.log"
date >> "$LOGFILE"

vnc_kill()
{
  LC_ALL=en_US vncserver -list | awk '/^:/{system("kill -0 "$2" 2>/dev/null || vncserver -kill "$1)}'
}

# We want to start with a clean log as we will use the log to find the most
# recent DISPLAY (e.g. alvis10-12:38) the vncserver starts.
#> "${LOGFILE}"

# export the module function if it exists
[[ $(type -t module) == "function" ]] && export -f module

# Find available port
export app_port=$(find_port ${host})

# Generate password
password="$(create_passwd 32)"

# Save password for rfbath
echo -ne "${password}\n${spassword}" | vncpasswd -f > "vnc.passwd"

for i in $(seq 1 10); do
  # for turbovnc 3.0 compatability.
  if timeout 2 vncserver --help 2>&1 | grep 'nohttpd' >/dev/null 2>&1; then
   HTTPD_OPT='-nohttpd'
  fi

  # Attempt to start VNC server
  echo "Launching VNC (attempt $i)" >> $LOGFILE
  # Note: Most of these vncserver parameters are copied from how OOD starts the dashboard vncserver
  VNC_OUT=$(LC_ALL=C vncserver -log "${VNC_LOG}" -rfbport "$app_port" -rfbauth vnc.passwd -noxstartup -idletimeout 0 $HTTPD_OPT 2>&1)
  VNC_PID=$(pgrep -s 0 Xvnc) # the script above will daemonize the Xvnc process
  echo "${VNC_OUT}" >> $LOGFILE

  # Sometimes Xvnc hangs if it fails to find working display, we
  # should kill it and try again
  kill -0 ${VNC_PID} 2>/dev/null && [[ "${VNC_OUT}" =~ "Fatal server error" ]] && kill -TERM ${VNC_PID}

  # Check that Xvnc process is running, if not assume it died and
  # wait some random period of time before restarting
  kill -0 ${VNC_PID} 2>/dev/null || sleep 0.$(random_number 1 9)s

  # If running, then all is well and break out of loop
  kill -0 ${VNC_PID} 2>/dev/null && break
done
echo Done launching VNC >> $LOGFILE
